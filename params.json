{"name":"Maze","tagline":"","body":"# Maze\r\n\r\n### This is a maze generating and solving Java application.\r\n\r\n## Description\r\n\r\nThe user is prompted to either select a file containing a stored maze or generate one dynamically. Once the maze is created, there exist a number of possible algorithms to solve it. At this moment the below are implemented:\r\n- Prune: This scans the maze repeatedly, marking dead-ends as it encounters them. It continues to do so until no more dead ends can be found. What remains is tiles that can be part of a solution.\r\n- BFS: This scans the maze, beginning from the start point. Once the end point is reached, it marks the path that was followed to reach it. If a solution is possible, the shortest path will be found.\r\n\r\n## Future enhancements\r\nMy goal is to add graphics and display the steps of the generation / solution as occur. This could be running continuously, creating and solving random mazes. It would make a nice screensaver! :)\r\n\r\n### Next changes:\r\nThe below are minor changes that should happen soon:\r\n- Convert the maze loader and generators to different subclasses of Maze, which will implement an Interface\r\n\r\n### Want more? Check out my other projects!\r\n\r\n[Let's play broken telephone with Google Translate!! :)](http://nennes.github.io/PyBrokenTelephone/)\r\n\r\n[A Text to Image experiment](http://nennes.github.io/Text2Image/)\r\n\r\n[Ever wanted a nice Word Cloud out of a list of tags?](http://nennes.github.io/rWordCloud/)\r\n\r\n\r\n","google":"UA-73133619-1","note":"Don't delete this file! It's used internally to help with page regeneration."}